import java.io.*;
import java.util.*;
import java.util.Scanner;
import java.io.File;



class Oblig3{

	public static void main(String[] args) {   //main
        /*
        Read files 
        Check if the files are empty and exit if so.
        */

		String pattern ;
        String haystack ;
        String needle = "";
	    String  txt = "";
  
        if(args.length < 2) {
            System.err.println("Correct usage: java Oblig3 <needle> <haystack>");
            System.exit(0);
        } else {

        	pattern = args[0];
        	haystack= args[1];

            if(pattern.length() == 0){
                System.out.println("Needle is empty");
            }

			try {
                File file = new File(pattern);
                if (file.length() == 0) {
                    System.out.println("Needle is empty. Exiting"); 
                    System.exit(1);
                } else {       
				Scanner br = new Scanner (file);
                StringBuilder needleS = new StringBuilder();
                needle = br.nextLine();
                br.close();
             
                }
			} catch (IOException e) {}


			try {
                File file2 = new File(haystack);
                if (file2.length() == 0) {
                    System.out.println("Haystack is empty. Exiting"); 
                    System.exit(2);
                } else {   

				Scanner br1 = new Scanner (file2);
                StringBuilder haystackS = new StringBuilder();   
				while (br1.hasNextLine()){
                    haystackS.append(br1.nextLine() + "\n");
                    haystackS.append("\n");
                }
                br1.close(); 
                txt = haystackS.toString();
                }

			} catch (IOException e) {}
        }
        /*
        create obj of BoyerMoore class and call boyerAlgorithm and printResults methods.
        */

        BoyerMoore bm = new BoyerMoore(needle, txt);
        bm.boyerAlgorithm();
        bm.printResult();
	}

}

class BoyerMoore {

	ArrayList<Integer> results = new ArrayList<Integer> (); // to hold the results of the search
	int patlen; // length of the needle.
	int txtlen; // length of the text.
	String pattern; 
	String txt;
    char wildcard = '_';


	BoyerMoore(String pattern, String txt){
		this.pattern = pattern;
		this.txt = txt;
		patlen = pattern.length();
		txtlen = txt.length();

	}
/*
    use array generated by bcHeuristics.
    the pattern is shifted so that it is aligned to the text char symbol
    // that causes the mismatch

*/
   
	void boyerAlgorithm () {	
        int offset = 0;
		int [] bcs = bcHeuristics(pattern);
		
        
        while(offset+patlen <= txt.length()){
		 	int shift = bcs[txt.charAt(offset+pattern.length()-1)];
            int i;

            for(i = patlen-1; i >= 0; i--) {
                char temp = pattern.charAt(i);
                if(temp != wildcard && temp != txt.charAt(offset+i)) {
                    offset += shift;
                    break;
                }
            }
            if(i<0){
            	results.add(offset);
            	offset+=shift;
            }
		}
	}

    /*
    bcHeuristics generates bad character array.
    find the rightmost wildcard and 
    calculate the shift    */
	int [] bcHeuristics(String pattern) {
		int bcs[] = new int[256];
        for(int i = 0; i < bcs.length; i++) {
            bcs[i] = patlen; // 
        }
        for(int i = 0; i < patlen-1; i++) {
            bcs[(int) pattern.charAt(i)] = patlen-i-1;
        }
        for(int i = patlen-2; i >= 0; i--)
            if(pattern.charAt(i) == wildcard) {
                int shift = patlen-i-1;
                for(int j = 0; j < bcs.length; j++) {
                    if(bcs[j] > shift)
                        bcs[j] = shift;
                }
                break;
            }
        return bcs;
	}

   //print results
	void printResult() {
        System.out.println("index      match");
        for(int i : results)
            System.out.println(i+":         "   +txt.substring(i, i+patlen));
    }
}
